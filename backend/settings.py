"""
Django settings for backend project.

Generated by 'django-admin startproject' using Django 4.2.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
from datetime import timedelta
import json
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

STATIC_URL = 'https://readingcenter.purpleacademy.co.kr:3000/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# SECRET_KEY = 'django-insecure-aqmu2)ozma%#=@tm1bca4q4yk)2y=*4cu%6rd+7&b_=^-dx+3@'

def get_secret_key():
    with open('secrets.json') as f:
        secrets = json.load(f)
        return secrets['SECRET_KEY']
    
SECRET_KEY = get_secret_key()

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

# ALLOWED_HOSTS = []
ALLOWED_HOSTS = ["127.0.0.1", "0.0.0.0", "3.34.45.193", "https://readingcenter.purpleacademy.co.kr","https://readingcenter.purpleacademy.co.kr:3000/"]
CSRF_TRUSTED_ORIGINS = ['http://localhost:3000','https://readingcenter.purpleacademy.co.kr']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'rest_framework_simplejwt',
    'corsheaders',
    'graphene_django',

    'user',
    'academy',
]

GRAPHENE = {
    'SCHEMA': 'user.schema.schema',
}

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'backend.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'backend.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'readingcenter',
        'HOST': '172.31.8.56',
        'PORT': '3306',
        'USER': 'purple',
        'PASSWORD': 'Palove26!',
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'user.User'

CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",  # 클라이언트 도메인을 추가하세요
    # 다른 도메인을 추가할 수도 있습니다.
]
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_ORIGIN = "http://localhost:3000"
CORS_ALLOWED_ORIGINS = [
    'http://0.0.0.0',
    'http://127.0.0.1',
    'http://3.34.45.193',
    "http://localhost:3000",
    "http://localhost:8000",
    'https://readingcenter.purpleacademy.co.kr',
    'https://readingcenter.purpleacademy.co.kr:3000',
    'https://readingcenter.purpleacademy.co.kr:8000',
]

CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
    'choice',
    'category',
]
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [  # 기본적인 view 접근 권한 지정
        'rest_framework.permissions.AllowAny'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [  # session 혹은 token을 인증 할 클래스 설정
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication'
    ],
    'DEFAULT_PARSER_CLASSES': [  # request.data 속성에 액세스 할 때 사용되는 파서 지정
        'rest_framework.parsers.JSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser'
    ]
}
# DEFAULT_PERMISSION_CLASSES: 기본적으로 적용되는 view의 접근 권한을 설정합니다. 위의 코드에서는 AllowAny로 설정되어 모든 사용자가 접근할 수 있도록 설정되어 있습니다.
# DEFAULT_AUTHENTICATION_CLASSES: 인증 방식을 설정합니다. 위의 코드에서는 JWT(JSON Web Token) 인증, 토큰 인증, 세션 인증 순서로 설정되어 있습니다. 사용자 인증을 위해 JWT 토큰 인증과 토큰 인증 방식을 사용할 수 있으며, 필요에 따라 세션 인증을 사용할 수도 있습니다.
# DEFAULT_PARSER_CLASSES: 요청 데이터를 파싱하는 방식을 설정합니다. 위의 코드에서는 JSON, 폼 데이터, 멀티파트(form-based file 업로드) 파서를 설정하고 있습니다. 이렇게 설정하면 클라이언트가 요청을 보낼 때 해당 파서를 통해 데이터를 파싱하여 사용할 수 있습니다.

SIMPLE_JWT = {
    'AUTH_HEADER_TYPES': ('Bearer',),
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
    'ROTATE_REFRESH_TOKENS': True,
    'BLACKLIST_AFTER_ROTATION': True,
    'UPDATE_LAST_LOGIN': False,
}

CSRF_COOKIE_NAME = 'csrftoken' # Ensure CSRF cookie name matches the default
CSRF_HEADER_NAME = 'HTTP_X_CSRFTOKEN' # Ensure CSRF header name matches the default

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'DEBUG',  # 필요한 로그 레벨로 변경 가능 (DEBUG, INFO, WARNING, ERROR 등)
    },
}
